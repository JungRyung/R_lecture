setwd("D:\development\R_lecture\Rdata")  # <-- 작업 디렉토리는 임의로 지정하세요
setwd("D:/development/R_lecture/Rdata")  # <-- 작업 디렉토리는 임의로 지정하세요
setwd("D:/development/R_lecture/Rdata")  # <-- 작업 디렉토리는 임의로 지정하세요
install.packages("KoNLP") # 한국어 관련 작업을 할 때 꼭 필요한 기능을 가진 패키지 입니다
install.packages("wordcloud") # Word Cloud 작업을 해 주는 패키지 입니다
install.packages("KoNLP") # 한국어 관련 작업을 할 때 꼭 필요한 기능을 가진 패키지 입니다
install.packages("wordcloud") # Word Cloud 작업을 해 주는 패키지 입니다
setwd("D:/development/R_lecture/Rdata")  # <-- 작업 디렉토리는 임의로 지정하세요
install.packages("KoNLP") # 한국어 관련 작업을 할 때 꼭 필요한 기능을 가진 패키지 입니다
install.packages("wordcloud") # Word Cloud 작업을 해 주는 패키지 입니다
library(KoNLP)  # 설치된 패키지를 Loading 합니다.
library(wordcloud)
install.packages("KoNLP") # 한국어 관련 작업을 할 때 꼭 필요한 기능을 가진 패키지 입니다
install.packages("rvest")
install.packages("stringr")
library(rvest)
library(stringr)
title=c()
url=c()
press=c()
body=c()
time=c()
url_b = "https://news.daum.net/breakingnews/?page=1"
## 타이틀이 있는 css 정보
t_css = "#mArticle .tit_thumb .link_txt"
pt_css = ".info_news"
#크롤링하는 url정보
cr_rul=paste0(url_b,1,sep="")
hdoc=read_html(cr_url)
setwd("D:/development/R_lecture/Rdata")
install.packages("rvest")
install.packages("rvest")
library(stringr)
title=c()
title=c()
url=c()
press=c()
body=c()
time=c()
url_b = "https://news.daum.net/breakingnews/?page=1"
## 타이틀이 있는 css 정보
t_css = "#mArticle .tit_thumb .link_txt"
pt_css = ".info_news"
b_css = ".desc_thumb .link_txt"
#크롤링하는 url정보
cr_rul=paste0(url_b,1,sep="")
hdoc=read_html(cr_url)
()
()
()
()
()
()
setwd("D:/development/R_lecture/Rdata")
install.packages("rvest")
install.packages("stringr")
install.packages("stringr")
library(rvest)
library(stringr)
title=c()
url=c()
press=c()
body=c()
time=c()
url_b = "https://news.daum.net/breakingnews/?page=1"
## 타이틀이 있는 css 정보
t_css = "#mArticle .tit_thumb .link_txt"
pt_css = ".info_news"
b_css = ".desc_thumb .link_txt"
#크롤링하는 url정보
cr_rul=paste0(url_b,1,sep="")
hdoc=read_html(cr_url)
#크롤링하는 url정보
cr_url=paste0(url_b,1,sep="")
hdoc=read_html(cr_url)
t_node=html_nodes(hdoc,t_css)
pt_node=html_nodes(hdoc,pt_css)
pt_node
b_node=html_nodes(hdoc,b_css)
url_part=html_attr(t_node,"href")
url_part
title_part=html_text(t_node)
title_part
pt_part=html_test(pt_node)
pt_part
pt_part=html_text(pt_node)
pt_part
time_part=str_sub(pt_part,-5)
time_part
press_part=str_sub(pt_part,end=-9)
press_part
b_part=html_text(b_node)
b_part
b_part=str_trim(b_part,side = "both")
b_part
title=c(title,title_part)
press=c(press,press_part)
time=c(time,time_part)
body=c(body,b_part)
url=c(url,url_part)
news=data.frame(title,press,time,body,url)
title=c()
url=c()
press=c()
body=c()
time=c()
url_b = "https://news.daum.net/breakingnews/?page=1"
## 타이틀이 있는 css 정보
t_css = "#mArticle .tit_thumb .link_txt"
pt_css = ".info_news"
b_css = ".desc_thumb .link_txt"
for(i in 1:200){
#크롤링하는 url정보
cr_url=paste0(url_b,1,sep="")
hdoc=read_html(cr_url)
t_node=html_nodes(hdoc,t_css)
pt_node=html_nodes(hdoc,pt_css)
b_node=html_nodes(hdoc,b_css)
#titile에 있는 url정보
url_part=html_attr(t_node,"href")
title_part=html_text(t_node)
pt_part=html_text(pt_node)
time_part=str_sub(pt_part,-5)
press_part=str_sub(pt_part,end=-9)
b_part=html_text(b_node)
b_part=str_trim(b_part,side = "both")
title=c(title,title_part)
press=c(press,press_part)
time=c(time,time_part)
body=c(body,b_part)
url=c(url,url_part)
}
news=data.frame(title,press,time,body,url)
write.csv(news, "news0706.csv")
view(news)
View(news)
setwd("D:/development/R_lecture/Rdata")
library(rvest)
library(stringr)
library(dplyr)
rm(list=ls())
title=c()
grade=c()
url_b=c()
url_b="https://movie.naver.com/movie/point/af/list.nhn?&page=1"
craw_url=paste(url_b,1,Encoding("EUC-KR"))
t_css=".color_b"
hdoc=read_html(craw_url)
hdoc=read_html(craw_url,encoding = "EUC-KR")
craw_url=gsub("unknown","",craw_url)
t_css=".color_b"
g_css="#old_content em"
hdoc=read_html(craw_url,encoding = "EUC-KR")
title=c(title,title_part)
title_part=read_html(craw_url,encoding = "CP949")%>%
html_nodes(t_css)%>%
html_text
library(rvest)
library(stringr)
library(dplyr)
rm(list=ls())
title=c()
grade=c()
url_b="https://movie.naver.com/movie/point/af/list.nhn?&page="
for(i in 1:100){
craw_url=paste0(url_b,i,sep="")
t_css=".color_b"
g_css="#old_content em"
title_part=read_html(craw_url,encoding = "CP949")%>%
html_nodes(t_css)%>%
html_text
title=c(title,title_part)
}
library(rvest)
library(stringr)
library(dplyr)
rm(list=ls())
title=c()
grade=c()
url_b="https://movie.naver.com/movie/point/af/list.nhn?&page="
for(i in 1:100){
craw_url=paste0(url_b,i,sep="")
t_css=".color_b"
title_part=read_html(craw_url,encoding = "CP949")%>%
html_nodes(t_css)%>%
html_text
title=c(title,title_part)
}
View(title)
install.packages("multilinguer")
library(multilinguer)
install_jdk()
install.packages('rJava', type = 'binary');library(rJava);.jinit();rstudioapi::restartSession()
install.packages(c('stringr','hash','tau','Sejong','RSQLite','devtools'),type="binary")
install.packages(c("stringr", "hash", "tau", "Sejong", "RSQLite", "devtools"), type = "binary")
install.packages("remotes")
remotes::install_github('haven-jeon/KoNLP', upgrade="never",INSTALL_opts=c("--no-multiarch"))
library(KoNLP)
install.packages("wordcloud") # Word Cloud 작업을 해 주는 패키지 입니다
library(wordcloud)
txt <- readLines("hong.txt") # txt 라는 변수에 한 줄 씩 읽어 들입니다.
txt <- gsub("저","",txt)  # 제거할 글자를 지정합니다
txt <- gsub("수","",txt)  # 제거할 글자를 지정합니다
txt <- gsub("들","",txt)  # 제거할 글자를 지정합니다
nouns <- sapply(txt,extractNoun,USE.NAMES=F)
head(unlist(nouns), 30)
write(unlist(nouns),"hong_2.txt")
rev <- read.table("hong_2.txt")
nrow(rev) # rev 변수에 몇건의 데이터가 있는지 확인해 봅니다
wordcount <- table(rev)
head(sort(wordcount, decreasing=T),30)
library(RColorBrewer) # 화면에 출력할 컬러를 사용할 라이브러리를 Loading 합니다.
palete <- brewer.pal(9,"Set1") # 글자 색깔을 지정합니다.
wordcloud(names(wordcount),freq=wordcount,scale=c(5,0.5),rot.per=0.25,min.freq=1,
random.order=F,random.color=T,colors=palete)
savePlot("hong.png", type="png")
install.packages("igraph")
library(igraph)
savePlot("hong.png", type="png")
library(RColorBrewer) # 화면에 출력할 컬러를 사용할 라이브러리를 Loading 합니다.
palete <- brewer.pal(9,"Set1") # 글자 색깔을 지정합니다.
wordcloud(names(wordcount),freq=wordcount,scale=c(5,0.5),rot.per=0.25,min.freq=1,
random.order=F,random.color=T,colors=palete)
savePlot("hong.png", type="png")
kk=head(sort(wordcount, decreasing=T),30)
kk
tt=barplot(kk,col=rainbow(30),ylim=c(0,30))
text(tt,kk,labels = paste0(kk,"건"),pos=3,cex=2,las=1)
text(tt,kk,labels = paste0(kk,"건"),pos=3,cex=1,las=1)
kk=head(sort(wordcount, decreasing=T),30)
kk
tt=barplot(kk,col=rainbow(30),ylim=c(0,30))
text(tt,kk,labels = paste0(kk,"건"),pos=3,cex=1,las=1)
tt=barplot(kk,col=rainbow(30),ylim=c(0,30),las=2)
text(tt,kk,labels = paste0(kk,"건"),pos=3,cex=1,las=1)
savePlot("hong.png", type="png")
setwd("D:/development/R_lecture/Rdata")  # <-- 작업 디렉토리는 임의로 지정하세요
#library(KoNLP)  # 설치된 패키지를 Loading 합니다.
library(wordcloud)
library(igraph)
txt <- readLines("hong.txt") # txt 라는 변수에 한 줄 씩 읽어 들입니다.
txt <- gsub("저","",txt)  # 제거할 글자를 지정합니다
txt <- gsub("수","",txt)  # 제거할 글자를 지정합니다
txt <- gsub("들","",txt)  # 제거할 글자를 지정합니다
nouns <- sapply(txt,extractNoun,USE.NAMES=F)
head(unlist(nouns), 30)
write(unlist(nouns),"hong_2.txt")
rev <- read.table("hong_2.txt")
nrow(rev) # rev 변수에 몇건의 데이터가 있는지 확인해 봅니다
wordcount <- table(rev)
kk=head(sort(wordcount, decreasing=T),30)
kk
tt=barplot(kk,col=rainbow(30),ylim=c(0,30),las=2)
text(tt,kk,labels = paste0(kk,"건"),pos=3,cex=1,las=1)
library(RColorBrewer) # 화면에 출력할 컬러를 사용할 라이브러리를 Loading 합니다.
palete <- brewer.pal(9,"Set1") # 글자 색깔을 지정합니다.
wordcloud(names(wordcount),
freq=wordcount,
scale=c(5,0.5),
rot.per=0.25,
min.freq=1,
random.order=F,
random.color=T,
colors=palete)
savePlot("hong.png", type="png")
setwd("D:/development/R_lecture/Rdata")
install.packages("rvest")
install.packages("stringr")
install.packages("stringr")
library(rvest)
library(rvest)
library(rvest)
library(stringr)
library(rvest)
library(dplyr)
library(ggplot2)
library(wordcloud)
library(wordcloud2)
library(wordcloud2)
hdoc=read_html(cr_url,encoding = "UTF-8")
url_b = "https://www.bskorea.or.kr/bible/korbibReadpage.php?version=GAE&book=gen&chap="
cr_url = paste0(url_b,1)
t_css="#tdBible1 span"
hdoc=read_html(cr_url,encoding = "UTF-8")
n_css=html_nodes(hdoc,t_css)
cnt_part=html_text(n_css)
cnt_part
cnt=c()
cnt_part=gsub("\\d+","",cnt_part)
cnt_part
cnt_part=str_trim(cnt_part,sid="both")
cnt_part
cnt=c(cnt,cnt_part)
library(KoNLP)
cnt=c()
url_b = "https://www.bskorea.or.kr/bible/korbibReadpage.php?version=GAE&book=gen&chap="
for(i in 1:50){
cr_url = paste0(url_b,i)
t_css="#tdBible1 span"
hdoc=read_html(cr_url,encoding = "UTF-8")
n_css=html_nodes(hdoc,t_css)
cnt_part=html_text(n_css)
cnt_part=gsub("\\d+","",cnt_part)
cnt_part
cnt_part=str_trim(cnt_part,sid="both")
cnt_part
cnt=c(cnt,cnt_part)
}
library(KoNLP)
txt=sapply(cnt,extractNoun, USE.NAMES = F)
txt=unlist(txt)
count=Filter(function(x){nchar(x)>=2},txt)
word=table(count)
kk=head(sort(word.decreasing=T),20)
kk=head(sort(word,decreasing=T),20)
kk
barplot(kk,col=rainbow(20))
barplot(kk,col=rainbow(20),ylim=c(0,300),las=2)
text(tt,kk,label=paste0(kk,"개"),pos=3,col=2)
library(RColorBrewer)
display.brewer.all()
palate=brewer.pal(9,"Greens")
wordcloud(names(word),
freq=word,
min.feq=2,
scale=c(5,0.5),
random.order = F,
random.color = T,
colors = palate)
## 성경 창세기전 크롤링링
setwd("D:/development/R_lecture/Rdata")
install.packages("wordcloud2") # Word Cloud 작업을 해 주는 패키지 입니다
library(wordcloud2)
wordcloud2(data=word,
size=0.4,
shape="diamond")
## 성경 출애굽기 크롤링
setwd("D:/development/R_lecture/Rdata")
install.packages("rvest")
library(rvest)
library(stringr)
library(dplyr)
library(ggplot2)
library(wordcloud)
library(wordcloud2)
cnt=c()
url_b = "https://www.bskorea.or.kr/bible/korbibReadpage.php?version=GAE&book=exo&chap="
for(i in 1:40){
cr_url = paste0(url_b,i)
t_css="#tdBible1 span"
hdoc=read_html(cr_url,encoding = "UTF-8")
n_css=html_nodes(hdoc,t_css)
cnt_part=html_text(n_css)
cnt_part=gsub("\\d+","",cnt_part)
cnt_part
cnt_part=str_trim(cnt_part,sid="both")
cnt_part
cnt=c(cnt,cnt_part)
}
library(KoNLP)
txt=sapply(cnt,extractNoun, USE.NAMES = F)
txt=unlist(txt)
count=Filter(function(x){nchar(x)>=2},txt)
word=table(count)
kk=head(sort(word,decreasing=T),20)
kk
tt=barplot(kk,col=rainbow(20),ylim=c(0,300),las=2)
text(tt,kk,label=paste0(kk,"개"),pos=3,col=2)
library(RColorBrewer)
display.brewer.all()
palate=brewer.pal(9,"Greens")
wordcloud(names(word),
freq=word,
min.feq=2,
scale=c(5,0.5),
random.order = F,
random.color = T,
colors = palate)
wordcloud2(data=word,
size=0.4,
shape="diamond")
