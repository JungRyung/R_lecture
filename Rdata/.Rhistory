filter(class %in% c("compact", "subcompact", "suv"))
ggplot(data = class_mpg, aes(x = class, y = cty)) +
geom_boxplot()
setwd("./Rdata")  # <-- 작업 디렉토리는 임의로 지정하세요
# 08-2
mpg <- as.data.frame(ggplot2::mpg)
midwest <- as.data.frame(ggplot2::midwest)
## Q1. x축은 cty, y축은 hwy로 된 산점도
ggplot(data = mpg, aes(x = cty, y = hwy)) + geom_point()
## Q2. x축은 poptotal, y축은 popasian으로 된 산점도
ggplot(data = midwest, aes(x = poptotal, y = popasian)) + geom_point() +
xlim(0,500000) +
ylim(0,10000)
# 08-3
## Q1.
kk=table(mpg$class)
tt=barplot(kk,col=rainbow(8),ylim=c(0,70))
text(tt,kk,paste0(kk,"대"),pos=3,col=2,cex=2)
theme_set(theme_gray(base_family='NanumGothic'))
# 08-2
mpg <- as.data.frame(ggplot2::mpg)
midwest <- as.data.frame(ggplot2::midwest)
## Q1. x축은 cty, y축은 hwy로 된 산점도
ggplot(data = mpg, aes(x = cty, y = hwy)) + geom_point()
## Q2. x축은 poptotal, y축은 popasian으로 된 산점도
ggplot(data = midwest, aes(x = poptotal, y = popasian)) + geom_point() +
xlim(0,500000) +
ylim(0,10000)
# 08-3
## Q1.
kk=table(mpg$class)
tt=barplot(kk,col=rainbow(8),ylim=c(0,70))
text(tt,kk,paste0(kk,"대"),pos=3,col=2,cex=2)
df=as.data.frame(mpg %>%
filter(class=="suv")%>%
group_by(manufacturer)%>%
summarise(mean_cty=mean(cty),
mean_hwy=mean(hwy))%>%
arrange(desc(mean_cty))%>%
head(5))
# 08-2
mpg <- as.data.frame(ggplot2::mpg)
midwest <- as.data.frame(ggplot2::midwest)
## Q1. x축은 cty, y축은 hwy로 된 산점도
ggplot(data = mpg, aes(x = cty, y = hwy)) + geom_point()
## Q2. x축은 poptotal, y축은 popasian으로 된 산점도
ggplot(data = midwest, aes(x = poptotal, y = popasian)) + geom_point() +
xlim(0,500000) +
ylim(0,10000)
# 08-2
mpg <- as.data.frame(ggplot2::mpg)
midwest <- as.data.frame(ggplot2::midwest)
## Q1. x축은 cty, y축은 hwy로 된 산점도
ggplot(data = mpg, aes(x = cty, y = hwy)) + geom_point()
## Q2. x축은 poptotal, y축은 popasian으로 된 산점도
ggplot(data = midwest, aes(x = poptotal, y = popasian)) + geom_point() +
xlim(0,500000) +
ylim(0,10000)
install.packages(ggplot2)
library(ggplot2)
## Q1. x축은 cty, y축은 hwy로 된 산점도
ggplot(data = mpg, aes(x = cty, y = hwy)) + geom_point()
## Q2. x축은 poptotal, y축은 popasian으로 된 산점도
ggplot(data = midwest, aes(x = poptotal, y = popasian)) + geom_point() +
xlim(0,500000) +
ylim(0,10000)
# 08-3
## Q1.
kk=table(mpg$class)
tt=barplot(kk,col=rainbow(8),ylim=c(0,70))
text(tt,kk,paste0(kk,"대"),pos=3,col=2,cex=2)
df=as.data.frame(mpg %>%
filter(class=="suv")%>%
group_by(manufacturer)%>%
summarise(mean_cty=mean(cty),
mean_hwy=mean(hwy))%>%
arrange(desc(mean_cty))%>%
head(5))
# 08-2
mpg <- as.data.frame(ggplot2::mpg)
midwest <- as.data.frame(ggplot2::midwest)
library(ggplot2)
## Q1. x축은 cty, y축은 hwy로 된 산점도
ggplot(data = mpg, aes(x = cty, y = hwy)) + geom_point()
## Q2. x축은 poptotal, y축은 popasian으로 된 산점도
ggplot(data = midwest, aes(x = poptotal, y = popasian)) + geom_point() +
xlim(0,500000) +
ylim(0,10000)
# 08-3
## Q1.
kk=table(mpg$class)
tt=barplot(kk,col=rainbow(8),ylim=c(0,70))
text(tt,kk,paste0(kk,"대"),pos=3,col=2,cex=2)
df=as.data.frame(mpg %>%
filter(class=="suv")%>%
group_by(manufacturer)%>%
summarise(mean_cty=mean(cty),
mean_hwy=mean(hwy))%>%
arrange(desc(mean_cty))%>%
head(5))
# 08-2
par(family='Unbatang')
mpg <- as.data.frame(ggplot2::mpg)
midwest <- as.data.frame(ggplot2::midwest)
library(ggplot2)
## Q1. x축은 cty, y축은 hwy로 된 산점도
ggplot(data = mpg, aes(x = cty, y = hwy)) + geom_point()
## Q2. x축은 poptotal, y축은 popasian으로 된 산점도
ggplot(data = midwest, aes(x = poptotal, y = popasian)) + geom_point() +
xlim(0,500000) +
ylim(0,10000)
# 08-3
## Q1.
kk=table(mpg$class)
tt=barplot(kk,col=rainbow(8),ylim=c(0,70))
text(tt,kk,paste0(kk,"대"),pos=3,col=2,cex=2)
df=as.data.frame(mpg %>%
filter(class=="suv")%>%
group_by(manufacturer)%>%
summarise(mean_cty=mean(cty),
mean_hwy=mean(hwy))%>%
arrange(desc(mean_cty))%>%
head(5))
df
ggplot(data=df,aes(x=reorder(manufacturer,mean_cty),y=mean_cty)) +
geom_col(fill=rainbow(5)) +
coord_flip() +
xlab("차종") +
ylab("평균도시연비")
tt=barplot(kk,col=rainbow(8),ylim=c(0,70))
text(tt,kk,paste0(kk,"대"),pos=3,col=2,cex=2)
# 08-3
## Q1.
kk=table(mpg$class)
tt=barplot(kk,col=rainbow(8),ylim=c(0,70))
text(tt,kk,paste0(kk,"대"),pos=3,col=2,cex=2)
df=as.data.frame(mpg %>%
filter(class=="suv")%>%
group_by(manufacturer)%>%
summarise(mean_cty=mean(cty),
mean_hwy=mean(hwy))%>%
arrange(desc(mean_cty))%>%
head(5))
df
ggplot(data=df,aes(x=reorder(manufacturer,mean_cty),y=mean_cty)) +
geom_col(fill=rainbow(5)) +
coord_flip() +
xlab("차종") +
ylab("평균도시연비")
# 08-2
mpg <- as.data.frame(ggplot2::mpg)
midwest <- as.data.frame(ggplot2::midwest)
setwd("../term")
getwd()
par(family = "AppleGothic")
data = read.csv("sales_data_new.csv")
head(data)
data[,3:10]
setwd("../term")
getwd()
setwd("../term")
setwd("/Users/ryung/Desktop/Development/R_lecture/term")
getwd()
par(family = "AppleGothic")
data = read.csv("sales_data_new.csv")
head(data)
data[,3:10]
## 건강음료에 대한 다중 회귀 분석
helth_beverage=data[1:60,]
## 과즙음료에 대한 다중 회귀 분석
juice_beverage=data[61:120,]
## 차 음료에 대한 다중 회귀 분석
tea_beverage=data[120:180,]
helth_beverage
helth_beverage_feature = helth_beverage[4:10]
helth_beverage_feature
cov(helth_beverage_feature)
cor(helth_beverage_feature)
## 과즙음료에 대한 다중 회귀 분석
juice_beverage=data[61:120,]
juice_beverage
juice_beverage_feature = juice_beverage[4:10]
juice_beverage_feature
cov(juice_beverage_feature)
cor(juice_beverage_feature)
## 차 음료에 대한 다중 회귀 분석
tea_beverage=data[120:180,]
tea_beverage
tea_beverage_feature = tea_beverage[4:10]
tea_beverage_feature
cov(tea_beverage_feature)
cor(tea_beverage_feature)
cor(helth_beverage_feature)
## Forward selection
model = lm(QTY~SALEDAY,helth_beverage_feature)
summary(model)
## Forward selection
model = lm(QTY~SALEDAY,helth_beverage_feature)
summary(model)
model = lm(QTY~SALEDAY+PRICE,helth_beverage_feature)
summary(model)
model = lm(QTY~SALEDAY+PRICE+ITEM_CNT,helth_beverage_feature)
summary(model)
model = lm(QTY~SALEDAY+PRICE+ITEM_CNT+MAXTEMP,helth_beverage_feature)
summary(model)
model = lm(QTY~SALEDAY+PRICE+ITEM_CNT+MAXTEMP+RAIN_DAY,helth_beverage_feature)
summary(model)
model = lm(QTY~SALEDAY+PRICE+ITEM_CNT+MAXTEMP+RAIN_DAY+HOLIDAY,helth_beverage_feature)
summary(model)
## Forward selection
model = lm(QTY~SALEDAY,helth_beverage_feature)
summary(model)
model = lm(QTY~SALEDAY+PRICE,helth_beverage_feature)
summary(model)
model = lm(QTY~SALEDAY+PRICE+ITEM_CNT+MAXTEMP+RAIN_DAY+HOLIDAY,helth_beverage_feature)
summary(model)
model = lm(QTY~SALEDAY+PRICE+ITEM_CNT+MAXTEMP+RAIN_DAY,helth_beverage_feature)
summary(model)
## All Subsets Regression
library(leaps)
leaps=regsubsets(QTY~.,data=helth_beverage_feature,nbest=5)
summary(leaps)
plot(leaps)
#best
model = lm(QTY~SALEDAY+PRICE+RAIN_DAY,helth_beverage_feature)
summary(model)
helth_beverage_feature_train = helth_beverage_feature[1:42,]
helth_beverage_feature_test = helth_beverage_feature[42:60,]
dim(helth_beverage_feature_train)
dim(helth_beverage_feature_test)
## 모든 feature를 포함한 다중회귀
lm.fit = lm(QTY~., data = helth_beverage_feature)
summary(lm.fit)
## forward와 backward 방식을 전부 써서 좋은 결과만 가져온다.(both)
lm.fit2 = step(lm.fit,method="both")
summary(lm.fit2)
lm.yhat2=predict(lm.fit2,newdata=helth_beverage_feature)
kk=mean((lm.yhat2-helth_beverage_feature$QTY)^2)
cor(helth_beverage_feature)
cor(juice_beverage_feature)
cor(juice_beverage_feature)
## 차 음료에 대한 다중 회귀 분석
tea_beverage=data[120:180,]
tea_beverage
tea_beverage_feature = tea_beverage[4:10]
tea_beverage_feature
cov(tea_beverage_feature)
cor(tea_beverage_feature)
## forward와 backward 방식을 전부 써서 좋은 결과만 가져온다.(both)
lm.fit2 = step(lm.fit,method="both")
summary(lm.fit2)
## 잔차분석
anova(fit2)
## 잔차분석
anova(lm.fit2)
plot(lm.fit2)
plot(lm.fit2)
## forward와 backward 방식을 전부 써서 좋은 결과만 가져온다.(both)
lm.fit2 = step(lm.fit,method="both")
summary(lm.fit2)
## Forward selection
model = lm(QTY~SALEDAY,helth_beverage_feature)
summary(model)
model = lm(QTY~SALEDAY+PRICE,helth_beverage_feature)
summary(model)
model = lm(QTY~SALEDAY+PRICE+ITEM_CNT,helth_beverage_feature)
summary(model)
model = lm(QTY~SALEDAY+PRICE+ITEM_CNT+MAXTEMP,helth_beverage_feature)
summary(model)
model = lm(QTY~SALEDAY+PRICE+ITEM_CNT+MAXTEMP+RAIN_DAY,helth_beverage_feature)
summary(model)
model = lm(QTY~SALEDAY+PRICE+ITEM_CNT+MAXTEMP+RAIN_DAY+HOLIDAY,helth_beverage_feature)
summary(model)
## All Subsets Regression
library(leaps)
leaps=regsubsets(QTY~.,data=helth_beverage_feature,nbest=5)
summary(leaps)
plot(leaps)
#best
model = lm(QTY~SALEDAY+PRICE+RAIN_DAY,helth_beverage_feature)
summary(model)
vif(helth_beverage_feature)
## forward와 backward 방식을 전부 써서 좋은 결과만 가져온다.(both)
lm.fit2 = step(lm.fit,method="both")
summary(lm.fit2)
lm.yhat2=predict(lm.fit2,newdata=helth_beverage_feature)
kk=mean((lm.yhat2-helth_beverage_feature$QTY)^2)
sqrt(kk)
plot(lm.yhat2,helth_beverage_feature$QTY)
abline(a=0,b=1,col=2)
## 모든 feature를 포함한 다중회귀
lm.fit = lm(QTY~., data = helth_beverage_feature)
summary(lm.fit)
## forward와 backward 방식을 전부 써서 좋은 결과만 가져온다.(both)
lm.fit2 = step(lm.fit,method="both")
summary(lm.fit2)
helth_beverage
helth_beverage_feature
lm.fit = lm(QTY~., data = juice_beverage_feature)
summary(lm.fit)
## forward와 backward 방식을 전부 써서 좋은 결과만 가져온다.(both)
lm.fit2 = step(lm.fit,method="both")
summary(lm.fit2)
lm.yhat2=predict(lm.fit2,newdata=Boston_test)
kk=mean((lm.yhat2-Boston_test$medv)^2)
sqrt(kk)
plot(lm.yhat2,Boston_test$medv)
abline(a=0,b=1,col=2)
## 과즙음료에 대한 다중 회귀 분석
juice_beverage=data[61:120,]
juice_beverage
juice_beverage_feature = juice_beverage[4:10]
juice_beverage_feature
cov(juice_beverage_feature)
cor(juice_beverage_feature)
lm.fit = lm(QTY~., data = juice_beverage_feature)
summary(lm.fit)
## forward와 backward 방식을 전부 써서 좋은 결과만 가져온다.(both)
lm.fit2 = step(lm.fit,method="both")
summary(lm.fit2)
lm.yhat2=predict(lm.fit2,newdata=Boston_test)
View(juice_beverage_feature)
## 과즙음료에 대한 다중 회귀 분석
juice_beverage=data[61:120,]
juice_beverage
juice_beverage_feature = juice_beverage[4:10]
juice_beverage_feature
cov(juice_beverage_feature)
cor(juice_beverage_feature)
lm.fit = lm(QTY~., data = juice_beverage_feature)
summary(lm.fit)
## Forward selection
model = lm(QTY~SALEDAY,juice_beverage_feature)
summary(model)
model = lm(QTY~SALEDAY+PRICE,juice_beverage_feature)
summary(model)
model = lm(QTY~SALEDAY+PRICE+ITEM_CNT,juice_beverage_feature)
summary(model)
model = lm(QTY~SALEDAY+PRICE+ITEM_CNT+MAXTEMP,juice_beverage_feature)
summary(model)
model = lm(QTY~SALEDAY+PRICE+ITEM_CNT+MAXTEMP+RAIN_DAY,juice_beverage_feature)
summary(model)
model = lm(QTY~SALEDAY+PRICE+ITEM_CNT+MAXTEMP+RAIN_DAY+HOLIDAY,juice_beverage_feature)
summary(model)
## All Subsets Regression
library(leaps)
leaps=regsubsets(QTY~.,data=juice_beverage_feature,nbest=5)
summary(leaps)
plot(leaps)
#best
model = lm(QTY~SALEDAY+PRICE+RAIN_DAY,juice_beverage_feature)
summary(model)
## All Subsets Regression
library(leaps)
leaps=regsubsets(QTY~.,data=juice_beverage_feature,nbest=8)
summary(leaps)
plot(leaps)
#best
model = lm(QTY~SALEDAY+PRICE+RAIN_DAY,juice_beverage_feature)
summary(model)
## forward와 backward 방식을 전부 써서 좋은 결과만 가져온다.(both)
lm.fit2 = step(lm.fit,method="both")
## All Subsets Regression
library(leaps)
leaps=regsubsets(QTY~.,data=juice_beverage_feature,nbest=8)
summary(leaps)
plot(leaps)
#best
model = lm(QTY~SALEDAY+PRICE+RAIN_DAY,juice_beverage_feature)
summary(model)
## All Subsets Regression
library(leaps)
leaps=regsubsets(QTY~.,data=juice_beverage_feature,nbest=5)
summary(leaps)
plot(leaps)
#best
model = lm(QTY~ITEM_CNT+PRICE+MAXTEMP+SALEDAY+RAIN_DAY,juice_beverage_feature)
summary(model)
## 차 음료에 대한 다중 회귀 분석
tea_beverage=data[120:180,]
tea_beverage
tea_beverage_feature = tea_beverage[4:10]
tea_beverage_feature
cov(tea_beverage_feature)
cor(tea_beverage_feature)
## Forward selection
model = lm(QTY~SALEDAY,tea_beverage_feature)
summary(model)
model = lm(QTY~SALEDAY+PRICE,tea_beverage_feature)
summary(model)
model = lm(QTY~SALEDAY+PRICE+ITEM_CNT,tea_beverage_feature)
summary(model)
model = lm(QTY~SALEDAY+PRICE+ITEM_CNT+MAXTEMP,tea_beverage_feature)
summary(model)
model = lm(QTY~SALEDAY+PRICE+ITEM_CNT+MAXTEMP+RAIN_DAY,tea_beverage_feature)
summary(model)
model = lm(QTY~SALEDAY+PRICE+ITEM_CNT+MAXTEMP+RAIN_DAY+HOLIDAY,tea_beverage_feature)
summary(model)
model = lm(QTY~SALEDAY+PRICE+ITEM_CNT,tea_beverage_feature)
summary(model)
model = lm(QTY~SALEDAY+PRICE+ITEM_CNT+MAXTEMP,tea_beverage_feature)
summary(model)
model = lm(QTY~SALEDAY+PRICE+ITEM_CNT+MAXTEMP+RAIN_DAY,tea_beverage_feature)
summary(model)
model = lm(QTY~SALEDAY+PRICE+ITEM_CNT+MAXTEMP+RAIN_DAY+HOLIDAY,tea_beverage_feature)
summary(model)
model = lm(QTY~SALEDAY+PRICE+ITEM_CNT+MAXTEMP,tea_beverage_feature)
summary(model)
model = lm(QTY~SALEDAY+PRICE+ITEM_CNT+MAXTEMP+RAIN_DAY,tea_beverage_feature)
summary(model)
model = lm(QTY~SALEDAY+PRICE+ITEM_CNT+MAXTEMP+RAIN_DAY+HOLIDAY,tea_beverage_feature)
summary(model)
model = lm(QTY~SALEDAY+PRICE+ITEM_CNT+MAXTEMP+RAIN_DAY,tea_beverage_feature)
summary(model)
## All Subsets Regression
library(leaps)
leaps=regsubsets(QTY~.,data=tea_beverage_feature,nbest=5)
summary(leaps)
plot(leaps)
## All Subsets Regression
library(leaps)
leaps=regsubsets(QTY~.,data=tea_beverage_feature,nbest=5)
summary(leaps)
plot(leaps)
## All Subsets Regression
library(leaps)
leaps=regsubsets(QTY~.,data=juice_beverage_feature,nbest=6)
summary(leaps)
plot(leaps)
## All Subsets Regression
library(leaps)
leaps=regsubsets(QTY~.,data=tea_beverage_feature,nbest=5)
summary(leaps)
plot(leaps)
## All Subsets Regression
library(leaps)
leaps=regsubsets(QTY~.,data=tea_beverage_feature,nbest=6)
summary(leaps)
plot(leaps)
#best
model = lm(QTY~ITEM_CNT+MAXTEMP+SALEDAY,tea_beverage_feature)
summary(model)
## 모든 feature를 포함한 다중회귀
lm.fit = lm(QTY~., data = juice_beverage_feature)
summary(lm.fit)
## forward와 backward 방식을 전부 써서 좋은 결과만 가져온다.(both)
lm.fit2 = step(lm.fit,method="both")
summary(lm.fit2)
lm.yhat2=predict(lm.fit2,newdata=juice_beverage_feature_test)
## 모든 feature를 포함한 다중회귀
lm.fit = lm(QTY~., data = tea_beverage_feature)
summary(lm.fit)
## forward와 backward 방식을 전부 써서 좋은 결과만 가져온다.(both)
lm.fit2 = step(lm.fit,method="both")
summary(lm.fit2)
install.packages("arules")
install.packages("arulesViz")
setwd("../Rdata")
getwd()
install.packages("arules")
library(arules)
library(arulesViz)
data(Groceries)
data(package = "arules")
Groceries
inspect(Groceries[1:10])
summary(Groceries)
sort(itemFrequency(Groceries, type="absolute"), decreasing=T)
round(sort(itemFrequency(Groceries, type="relative"), decreasing=T), 3)
itemFrequencyPlot(Groceries, topN=10, type="absolute")
itemFrequencyPlot(Groceries, topN=10, type="relative")
head(sort(itemFrequency(Groceries,type="absolute",decreasing=T)))
head(sort(itemFrequency(Groceries,type="absolute"),decreasing=T))
head(sort(itemFrequency(Groceries,type="relative"),decreasing=T))
sort(itemFrequency(Groceries, type="absolute"), decreasing=T)
round(sort(itemFrequency(Groceries, type="relative"), decreasing=T), 3)
itemFrequencyPlot(Groceries, topN=10, type="absolute")
itemFrequencyPlot(Groceries, topN=10, type="relative")
par(mfrow=c(1,2))
itemFrequencyPlot(Groceries, topN=10, type="absolute")
itemFrequencyPlot(Groceries, topN=10, type="relative")
# 데이터 세트를 이용하여 연관성 분석
apriori(Groceries)
9385*0.1130
9385*0.1/30
9385*0.005/30
result_rules=apriori(Groceries,parameter = list(support=0.005,confidence=0.5,minlen))
result_rules=apriori(Groceries,parameter = list(support=0.005,confidence=0.5,minlen=2))
summary((result_rules))
summary(result_rules)
inspect(result_rules[1:5])
result_lift = sort(result_rules, by="lift", decreasing = T)
inspect(result_lift[1:5])
result_conf =  sort(result_rules,by"confedence")
result_conf =  sort(result_rules,by="confidence", decreasing = T)
inspect(result_lift[1:5])
milk_rule = subset(result_lift, items %in% "whole milk")
milk_rule
inspect(milk_rule[1:5])
rhs.milk_rule=subset(result_lift,rhs %in% "whole milk")
rhs.milk_rule
inspect(rhs.milk_rule[1:5])
wholemilk_rule=apriori(Groceries,parameter = list(support=0.005,confidence=0.5,
minlen=2),appearance = list(default="lhs",
rhs="whole milk"))
wholemilk_rule=sort(sholemilk_rule.by="lift",decreasing=T)
wholemilk_rule=sort(wholemilk_rule.by="lift",decreasing=T)
wholemilk_rule=sort(wholemilk_rule,by="lift",decreasing=T)
inspect(wholemilk_rule[1:5])
plot(wholemilk_rule[1:10],method = "graph",measure = "lift",
shading = "confidence")
par(mfrow=c(1,1))
